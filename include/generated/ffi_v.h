#pragma once

#include <View.h>

extern "C" {

// CLASS: BView
BArchivable * BView_Instantiate(BMessage * archive);
void BView_AttachedToWindow(BView * self);
void BView_AllAttached(BView * self);
void BView_DetachedFromWindow(BView * self);
void BView_AllDetached(BView * self);
void BView_Draw(BView * self, BRect* update_rect);
void BView_MouseDown(BView * self, BPoint* where_);
void BView_MouseUp(BView * self, BPoint* where_);
void BView_MouseMoved(BView * self, BPoint* where_, uint32 code, const BMessage * drag_message);
void BView_WindowActivated(BView * self, bool active);
void BView_KeyDown(BView * self, const char * bytes, int32 num_bytes);
void BView_KeyUp(BView * self, const char * bytes, int32 num_bytes);
void BView_Pulse(BView * self);
void BView_FrameMoved(BView * self, BPoint* new_position);
void BView_FrameResized(BView * self, float new_width, float new_height);
void BView_TargetedByScrollView(BView * self, BScrollView * scroll_view);
void BView_DrawAfterChildren(BView * self, BRect* update_rect);
void BView_AddChild(BView * self, BView * child, BView * before);
bool BView_AddChild1(BView * self, BLayoutItem * child);
bool BView_RemoveChild(BView * self, BView * child);
int32 BView_CountChildren(const BView * self);
BView * BView_ChildAt(const BView * self, int32 index);
BView * BView_NextSibling(const BView * self);
BView * BView_PreviousSibling(const BView * self);
bool BView_RemoveSelf(BView * self);
BView * BView_FindView(const BView * self, const char * name);
BView * BView_Parent(const BView * self);
void BView_BeginRectTracking(BView * self, BRect* start_rect, uint32 style);
void BView_EndRectTracking(BView * self);
void BView_GetMouse(BView * self, BPoint * location, uint32 * buttons, bool check_message_queue);
void BView_DragMessage(BView * self, BMessage * message, BRect* drag_rect, BHandler * reply_to);
void BView_DragMessage1(BView * self, BMessage * message, BBitmap * bitmap, BPoint* offset, BHandler * reply_to);
void BView_DragMessage2(BView * self, BMessage * message, BBitmap * bitmap, drawing_mode drag_mode, BPoint* offset, BHandler * reply_to);
status_t BView_SetEventMask(BView * self, uint32 mask, uint32 options);
uint32 BView_EventMask(BView * self);
status_t BView_SetMouseEventMask(BView * self, uint32 mask, uint32 options);
void BView_ScrollBy(BView * self, float dh, float dv);
void BView_ScrollTo(BView * self, float x, float y);
void BView_ScrollTo1(BView * self, BPoint* where_);
void BView_MakeFocus(BView * self, bool focus);
void BView_ConvertToScreen(const BView * self, BPoint * point);
void BView_ConvertFromScreen(const BView * self, BPoint * point);
void BView_ConvertToScreen2(const BView * self, BRect * rect);
void BView_ConvertFromScreen2(const BView * self, BRect * rect);
void BView_ConvertToParent(const BView * self, BPoint * point);
void BView_ConvertFromParent(const BView * self, BPoint * point);
void BView_ConvertToParent2(const BView * self, BRect * rect);
void BView_ConvertFromParent2(const BView * self, BRect * rect);
void BView_SetFlags(BView * self, uint32 flags);
uint32 BView_Flags(const BView * self);
void BView_GetClippingRegion(const BView * self, BRegion * region);
void BView_ConstrainClippingRegion(BView * self, BRegion * region);
void BView_ClipToPicture(BView * self, BPicture * picture, BPoint* where_, bool sync);
void BView_ClipToInversePicture(BView * self, BPicture * picture, BPoint* where_, bool sync);
void BView_ClipToRect(BView * self, BRect* rect);
void BView_ClipToInverseRect(BView * self, BRect* rect);
void BView_ClipToShape(BView * self, BShape * shape);
void BView_ClipToInverseShape(BView * self, BShape * shape);
void BView_SetDrawingMode(BView * self, drawing_mode mode);
drawing_mode BView_DrawingMode(const BView * self);
void BView_GetBlendingMode(const BView * self, source_alpha * src_alpha, alpha_function * alpha_func);
void BView_SetPenSize(BView * self, float size);
float BView_PenSize(const BView * self);
bool BView_HasDefaultColors(const BView * self);
bool BView_HasSystemColors(const BView * self);
void BView_AdoptParentColors(BView * self);
void BView_AdoptSystemColors(BView * self);
void BView_AdoptViewColors(BView * self, BView * view);
void BView_SetViewUIColor(BView * self, color_which which, float tint);
color_which BView_ViewUIColor(const BView * self, float * tint);
void BView_SetHighUIColor(BView * self, color_which which, float tint);
color_which BView_HighUIColor(const BView * self, float * tint);
void BView_SetLowUIColor(BView * self, color_which which, float tint);
color_which BView_LowUIColor(const BView * self, float * tint);
void BView_SetLineMode(BView * self, cap_mode line_cap, join_mode line_join, float miter_limit);
join_mode BView_LineJoinMode(const BView * self);
cap_mode BView_LineCapMode(const BView * self);
float BView_LineMiterLimit(const BView * self);
void BView_SetFillRule(BView * self, int32 rule);
int32 BView_FillRule(const BView * self);
void BView_SetOrigin(BView * self, BPoint* where_);
void BView_SetOrigin1(BView * self, float x, float y);
BPoint *BView_Origin(const BView * self);
void BView_TranslateBy(BView * self, double x, double y);
void BView_ScaleBy(BView * self, double x, double y);
void BView_RotateBy(BView * self, double angle_radians);
void BView_PushState(BView * self);
void BView_PopState(BView * self);
void BView_MovePenTo(BView * self, BPoint* pt);
void BView_MovePenTo1(BView * self, float x, float y);
void BView_MovePenBy(BView * self, float x, float y);
BPoint *BView_PenLocation(const BView * self);
void BView_SetFont(BView * self, const BFont * font, uint32 mask);
void BView_GetFont(const BView * self, BFont * font);
void BView_TruncateString(const BView * self, BString * in_out, uint32 mode, float width);
float BView_StringWidth(const BView * self, const char * string);
float BView_StringWidth1(const BView * self, const char * string, int32 length);
void BView_SetFontSize(BView * self, float size);
void BView_ForceFontAliasing(BView * self, bool enable);
void BView_GetFontHeight(const BView * self, font_height * height);
void BView_SetScale(const BView * self, float scale);
float BView_Scale(const BView * self);
void BView_SetViewBitmap(BView * self, const BBitmap * bitmap, BRect* src_rect, BRect* dst_rect, uint32 follow_flags, uint32 options);
void BView_SetViewBitmap1(BView * self, const BBitmap * bitmap, uint32 follow_flags, uint32 options);
void BView_ClearViewBitmap(BView * self);
status_t BView_SetViewOverlay(BView * self, const BBitmap * overlay, BRect* src_rect, BRect* dst_rect, rgb_color * color_key, uint32 follow_flags, uint32 options);
status_t BView_SetViewOverlay1(BView * self, const BBitmap * overlay, rgb_color * color_key, uint32 follow_flags, uint32 options);
void BView_ClearViewOverlay(BView * self);
void BView_BeginLineArray(BView * self, int32 count);
void BView_EndLineArray(BView * self);
void BView_FillPolygon3(BView * self, const BPolygon * polygon, const BGradient * gradient);
void BView_FillPolygon4(BView * self, const BPoint * point_array, int32 num_points, const BGradient * gradient);
void BView_FillPolygon5(BView * self, const BPoint * point_array, int32 num_points, BRect* bounds, const BGradient * gradient);
void BView_FillTriangle2(BView * self, BPoint* point1, BPoint* point2, BPoint* point3, const BGradient * gradient);
void BView_FillTriangle3(BView * self, BPoint* point1, BPoint* point2, BPoint* point3, BRect* bounds, const BGradient * gradient);
void BView_FillRect1(BView * self, BRect* rect, const BGradient * gradient);
void BView_FillRegion1(BView * self, BRegion * rectegion, const BGradient * gradient);
void BView_InvertRect(BView * self, BRect* rect);
void BView_FillRoundRect1(BView * self, BRect* rect, float x_radius, float y_radius, const BGradient * gradient);
void BView_FillEllipse2(BView * self, BPoint* center, float x_radius, float y_radius, const BGradient * gradient);
void BView_FillEllipse3(BView * self, BRect* rect, const BGradient * gradient);
void BView_FillArc2(BView * self, BPoint* center, float x_radius, float y_radius, float start_angle, float arc_angle, const BGradient * gradient);
void BView_FillArc3(BView * self, BRect* rect, float start_angle, float arc_angle, const BGradient * gradient);
void BView_FillBezier1(BView * self, BPoint * control_points, const BGradient * gradient);
void BView_FillShape1(BView * self, BShape * shape, const BGradient * gradient);
void BView_CopyBits(BView * self, BRect* src, BRect* dst);
void BView_DrawBitmapAsync(BView * self, const BBitmap * a_bitmap, BRect* bitmap_rect, BRect* view_rect, uint32 options);
void BView_DrawBitmapAsync1(BView * self, const BBitmap * a_bitmap, BRect* bitmap_rect, BRect* view_rect);
void BView_DrawBitmapAsync2(BView * self, const BBitmap * a_bitmap, BRect* view_rect);
void BView_DrawBitmapAsync3(BView * self, const BBitmap * a_bitmap, BPoint* where_);
void BView_DrawBitmapAsync4(BView * self, const BBitmap * a_bitmap);
void BView_DrawBitmap(BView * self, const BBitmap * a_bitmap, BRect* bitmap_rect, BRect* view_rect, uint32 options);
void BView_DrawBitmap1(BView * self, const BBitmap * a_bitmap, BRect* bitmap_rect, BRect* view_rect);
void BView_DrawBitmap2(BView * self, const BBitmap * a_bitmap, BRect* view_rect);
void BView_DrawBitmap3(BView * self, const BBitmap * a_bitmap, BPoint* where_);
void BView_DrawBitmap4(BView * self, const BBitmap * a_bitmap);
void BView_DrawTiledBitmapAsync(BView * self, const BBitmap * a_bitmap, BRect* view_rect, BPoint* phase);
void BView_DrawTiledBitmap(BView * self, const BBitmap * a_bitmap, BRect* view_rect, BPoint* phase);
void BView_DrawChar(BView * self, char a_char);
void BView_DrawChar1(BView * self, char a_char, BPoint* location);
void BView_DrawString(BView * self, const char * string, escapement_delta * delta);
void BView_DrawString2(BView * self, const char * string, int32 length, escapement_delta * delta);
void BView_DrawString4(BView * self, const char * string, const BPoint * locations, int32 location_count);
void BView_DrawString5(BView * self, const char * string, int32 length, const BPoint * locations, int32 location_count);
void BView_Invalidate(BView * self, BRect* inval_rect);
void BView_Invalidate1(BView * self, const BRegion * inval_region);
void BView_Invalidate2(BView * self);
void BView_DelayedInvalidate(BView * self, bigtime_t delay);
void BView_DelayedInvalidate1(BView * self, bigtime_t delay, BRect* inval_rect);
void BView_SetDiskMode(BView * self, char * filename, long offset);
void BView_BeginPicture(BView * self, BPicture * a_picture);
void BView_AppendToPicture(BView * self, BPicture * a_picture);
BPicture * BView_EndPicture(BView * self);
void BView_DrawPicture(BView * self, const BPicture * a_picture);
void BView_DrawPicture1(BView * self, const BPicture * a_picture, BPoint* where_);
void BView_DrawPicture2(BView * self, const char * filename, long offset, BPoint* where_);
void BView_DrawPictureAsync(BView * self, const BPicture * a_picture);
void BView_DrawPictureAsync1(BView * self, const BPicture * a_picture, BPoint* where_);
void BView_DrawPictureAsync2(BView * self, const char * filename, long offset, BPoint* where_);
void BView_BeginLayer(BView * self, uint8 opacity);
void BView_EndLayer(BView * self);
void BView_MoveBy(BView * self, float dh, float dv);
void BView_MoveTo(BView * self, BPoint* where_);
void BView_MoveTo1(BView * self, float x, float y);
void BView_ResizeBy(BView * self, float dh, float dv);
void BView_ResizeTo(BView * self, float width, float height);
void BView_ResizeTo1(BView * self, BSize* size);
BSize *BView_MinSize(BView * self);
BSize *BView_MaxSize(BView * self);
BSize *BView_PreferredSize(BView * self);
void BView_SetExplicitMinSize(BView * self, BSize* size);
void BView_SetExplicitMaxSize(BView * self, BSize* size);
void BView_SetExplicitPreferredSize(BView * self, BSize* size);
void BView_SetExplicitSize(BView * self, BSize* size);
BSize *BView_ExplicitMinSize(const BView * self);
BSize *BView_ExplicitMaxSize(const BView * self);
BSize *BView_ExplicitPreferredSize(const BView * self);
bool BView_HasHeightForWidth(BView * self);
void BView_GetHeightForWidth(BView * self, float width, float * min, float * max, float * preferred);
void BView_InvalidateLayout(BView * self, bool descendants);
void BView_SetLayout(BView * self, BLayout * layout);
BLayout * BView_GetLayout(const BView * self);
void BView_EnableLayoutInvalidation(BView * self);
void BView_DisableLayoutInvalidation(BView * self);
bool BView_IsLayoutInvalidationDisabled(BView * self);
bool BView_IsLayoutValid(const BView * self);
void BView_ResetLayoutInvalidation(BView * self);
BLayoutContext * BView_LayoutContext(const BView * self);
void BView_Layout(BView * self, bool force);
void BView_Relayout(BView * self);
void BView_SetToolTip(BView * self, const char * text);
void BView_SetToolTip1(BView * self, BToolTip * tip);
BToolTip * BView_ToolTip(const BView * self);
void BView_ShowToolTip(BView * self, BToolTip * tip);
void BView_HideToolTip(BView * self);
BView *BView_new(BMessage * archive);
BView *BView_new1(BRect* frame, const char * name, uint32 resizing_mode, uint32 flags);
BView *BView_new2(const char * name, uint32 flags, BLayout * layout);
BRect *BView_Bounds(const BView * self);
void BView_Flush(const BView * self);
BRect *BView_Frame(const BView * self);
void BView_GetPreferredSize(BView * self, float * _width, float * _height);
void BView_Hide(BView * self);
bool BView_IsFocus(const BView * self);
bool BView_IsHidden(const BView * self);
bool BView_IsHidden1(const BView * self, const BView * looking_from);
bool BView_IsPrinting(const BView * self);
BPoint *BView_LeftTop(const BView * self);
void BView_ResizeToPreferred(BView * self);
uint32 BView_ResizingMode(const BView * self);
void BView_SetResizingMode(BView * self, uint32 mode);
void BView_SetViewCursor(BView * self, const BCursor * cursor, bool sync);
void BView_Show(BView * self);
void BView_Sync(const BView * self);
BWindow * BView_Window(const BView * self);

} // extern "C"

